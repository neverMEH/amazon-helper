import { useState, useEffect } from 'react';
import { ChevronDown, ChevronUp, Info, AlertCircle } from 'lucide-react';
import InstanceSelector from './InstanceSelector';

interface QueryConfigurationStepProps {
  state: any;
  setState: (state: any) => void;
  instances: any[];
}

const TIMEZONES = [
  { value: 'UTC', label: '-00:00 UTC' },
  { value: 'America/New_York', label: '-05:00 EST' },
  { value: 'America/Chicago', label: '-06:00 CST' },
  { value: 'America/Denver', label: '-07:00 MST' },
  { value: 'America/Los_Angeles', label: '-08:00 PST' },
  { value: 'Europe/London', label: '+00:00 GMT' },
  { value: 'Europe/Paris', label: '+01:00 CET' },
  { value: 'Asia/Tokyo', label: '+09:00 JST' },
  { value: 'Australia/Sydney', label: '+10:00 AEST' }
];

export default function QueryConfigurationStep({ state, setState, instances }: QueryConfigurationStepProps) {
  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleInstanceChange = (instanceId: string) => {
    setState((prev: any) => ({ ...prev, instanceId }));
  };

  const handleTimezoneChange = (timezone: string) => {
    setState((prev: any) => ({ ...prev, timezone }));
  };

  const handleAdvancedOptionChange = (option: string, value: boolean) => {
    setState((prev: any) => ({
      ...prev,
      advancedOptions: {
        ...prev.advancedOptions,
        [option]: value
      }
    }));
  };

  const handleExportSettingChange = (field: string, value: string) => {
    setState((prev: any) => ({
      ...prev,
      exportSettings: {
        ...prev.exportSettings,
        [field]: value
      }
    }));
  };

  // Auto-generate export name
  const generateExportName = () => {
    const queryName = state.name || 'Query';
    const instanceName = selectedInstance?.instanceName || 'Instance';
    
    // Get date range from parameters or use default
    const startDate = state.parameters?.startDate || state.parameters?.start_date || '';
    const endDate = state.parameters?.endDate || state.parameters?.end_date || '';
    const dateRange = startDate && endDate ? `${startDate} to ${endDate}` : 'Date Range';
    
    // Format current date and time
    const now = new Date();
    const dateTimeRan = now.toISOString().split('T')[0] + '_' + 
                       now.toTimeString().split(' ')[0].replace(/:/g, '-');
    
    return `${queryName} - ${instanceName} - ${dateRange} - ${dateTimeRan}`;
  };


  const handleParameterChange = (param: string, value: any) => {
    setState((prev: any) => ({
      ...prev,
      parameters: {
        ...prev.parameters,
        [param]: value
      }
    }));
  };

  const selectedInstance = instances.find(i => i.instanceId === state.instanceId || i.id === state.instanceId);

  // Auto-generate export name when relevant fields change
  useEffect(() => {
    if (!state.exportSettings.name || state.exportSettings.name === '') {
      const autoGeneratedName = generateExportName();
      setState((prev: any) => ({
        ...prev,
        exportSettings: {
          ...prev.exportSettings,
          name: autoGeneratedName
        }
      }));
    }
  }, [state.name, selectedInstance?.instanceName, state.parameters?.startDate, state.parameters?.endDate, state.parameters?.start_date, state.parameters?.end_date]);

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Instance Selection */}
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          AMC Instance <span className="text-red-500">*</span>
        </label>
        <InstanceSelector
          instances={instances}
          value={state.instanceId}
          onChange={handleInstanceChange}
          placeholder="Select an instance..."
        />
        {selectedInstance && (
          <p className="mt-2 text-xs text-gray-500">
            Selected: {selectedInstance.accountName} account in {selectedInstance.region}
          </p>
        )}
      </div>

      {/* Timezone Selection */}
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Timezone
        </label>
        <select
          value={state.timezone}
          onChange={(e) => handleTimezoneChange(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
        >
          {TIMEZONES.map(tz => (
            <option key={tz.value} value={tz.value}>
              {tz.label}
            </option>
          ))}
        </select>
      </div>

      {/* Query Parameters */}
      {Object.keys(state.parameters).length > 0 && (
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Query Parameters
          </label>
          <div className="bg-gray-50 rounded-md p-4 space-y-3">
            {Object.entries(state.parameters).map(([param, value]) => (
              <div key={param}>
                <label className="block text-xs font-medium text-gray-600 mb-1">
                  {`{{${param}}}`}
                </label>
                {param.includes('date') ? (
                  <input
                    type="date"
                    value={value as string}
                    onChange={(e) => handleParameterChange(param, e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                  />
                ) : typeof value === 'number' ? (
                  <input
                    type="number"
                    value={value}
                    onChange={(e) => handleParameterChange(param, parseInt(e.target.value) || 0)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                  />
                ) : Array.isArray(value) ? (
                  <textarea
                    value={value.join(', ')}
                    onChange={(e) => handleParameterChange(param, e.target.value.split(',').map(v => v.trim()))}
                    placeholder="Enter comma-separated values"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                    rows={2}
                  />
                ) : (
                  <input
                    type="text"
                    value={value as string}
                    onChange={(e) => handleParameterChange(param, e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                  />
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Advanced Options */}
      <div className="mb-6">
        <button
          onClick={() => setShowAdvanced(!showAdvanced)}
          className="flex items-center text-sm font-medium text-gray-700 hover:text-gray-900"
        >
          {showAdvanced ? (
            <ChevronUp className="h-4 w-4 mr-1" />
          ) : (
            <ChevronDown className="h-4 w-4 mr-1" />
          )}
          Advanced Options
        </button>

        {showAdvanced && (
          <div className="mt-3 bg-gray-50 rounded-md p-4 space-y-3">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={state.advancedOptions.ignoreDataGaps}
                onChange={(e) => handleAdvancedOptionChange('ignoreDataGaps', e.target.checked)}
                className="mr-2"
              />
              <span className="text-sm">Ignore data gaps</span>
              <Info className="h-3 w-3 ml-1 text-gray-400" />
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={state.advancedOptions.appendThresholdColumns}
                onChange={(e) => handleAdvancedOptionChange('appendThresholdColumns', e.target.checked)}
                className="mr-2"
              />
              <span className="text-sm">Append aggregation threshold columns</span>
              <Info className="h-3 w-3 ml-1 text-gray-400" />
            </label>
          </div>
        )}
      </div>

      {/* Export Configuration */}
      <div className="border-t border-gray-200 pt-6">
        <h3 className="text-sm font-semibold text-gray-900 mb-4">Export Configuration</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Export Name
            </label>
            <input
              type="text"
              value={state.exportSettings.name}
              onChange={(e) => handleExportSettingChange('name', e.target.value)}
              placeholder="Auto-generated: [Query Name] - [Instance] - [Date Range] - [Date and Time Ran]"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
            />
            <p className="mt-1 text-xs text-gray-500">
              Automatically generated based on query name, instance, date range, and execution time. You can customize if needed.
            </p>
          </div>
        </div>
      </div>

      {/* Validation Messages */}
      {!state.instanceId && (
        <div className="mt-6 p-3 bg-yellow-50 border border-yellow-200 rounded-md flex items-start">
          <AlertCircle className="h-4 w-4 text-yellow-600 mt-0.5 mr-2 flex-shrink-0" />
          <p className="text-sm text-yellow-800">Please select an AMC instance to continue</p>
        </div>
      )}
    </div>
  );
}