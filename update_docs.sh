#!/bin/bash

# Update Documentation Script
# ===========================
# Automatically analyzes repository changes and updates CLAUDE.md
# Usage: ./update_docs.sh [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
DAYS=30
VERBOSE=""
DRY_RUN=""
AUTO_COMMIT=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --days)
            DAYS="$2"
            shift 2
            ;;
        --verbose|-v)
            VERBOSE="--verbose"
            shift
            ;;
        --dry-run|-d)
            DRY_RUN="--dry-run"
            shift
            ;;
        --auto-commit|-c)
            AUTO_COMMIT="true"
            shift
            ;;
        --help|-h)
            echo "Update Documentation Script"
            echo ""
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --days N        Look back N days for changes (default: 30)"
            echo "  --verbose, -v   Show detailed analysis output"
            echo "  --dry-run, -d   Show what would be updated without making changes"
            echo "  --auto-commit   Automatically commit changes if any"
            echo "  --help, -h      Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0                    # Update docs for last 30 days"
            echo "  $0 --days 7           # Update docs for last week"
            echo "  $0 --dry-run          # Preview changes without updating"
            echo "  $0 --auto-commit      # Update and commit automatically"
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}================================================${NC}"
echo -e "${BLUE}     CLAUDE.md Documentation Auto-Updater      ${NC}"
echo -e "${BLUE}================================================${NC}"
echo ""

# Check if in git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
fi

# Check if Python 3 is available
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Error: Python 3 is required but not installed${NC}"
    exit 1
fi

# Check if the update script exists
SCRIPT_PATH="scripts/update_claude_md.py"
if [ ! -f "$SCRIPT_PATH" ]; then
    echo -e "${RED}Error: Update script not found at $SCRIPT_PATH${NC}"
    exit 1
fi

# Run the update script
echo -e "${YELLOW}üîç Analyzing repository changes from the last $DAYS days...${NC}"
echo ""

if [ -n "$DRY_RUN" ]; then
    echo -e "${YELLOW}Running in DRY-RUN mode (no changes will be made)${NC}"
fi

python3 "$SCRIPT_PATH" --days "$DAYS" $VERBOSE $DRY_RUN

# Check if CLAUDE.md was modified (only if not in dry-run mode)
if [ -z "$DRY_RUN" ]; then
    if git diff --quiet CLAUDE.md; then
        echo -e "${GREEN}‚úÖ CLAUDE.md is already up to date${NC}"
    else
        echo ""
        echo -e "${GREEN}‚úÖ CLAUDE.md has been updated successfully${NC}"
        echo ""
        
        # Show the diff
        echo -e "${YELLOW}Changes made:${NC}"
        git diff --stat CLAUDE.md
        echo ""
        
        # Auto-commit if requested
        if [ "$AUTO_COMMIT" = "true" ]; then
            echo -e "${YELLOW}üìù Committing changes...${NC}"
            git add CLAUDE.md
            COMMIT_MSG="docs: Auto-update CLAUDE.md with recent changes

- Analyzed last $DAYS days of repository activity
- Updated features, fixes, and architectural changes
- Generated by update_docs.sh script

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git commit -m "$COMMIT_MSG"
            echo -e "${GREEN}‚úÖ Changes committed successfully${NC}"
            
            # Ask about pushing
            read -p "Would you like to push these changes? (y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git push
                echo -e "${GREEN}‚úÖ Changes pushed to remote repository${NC}"
            fi
        else
            echo -e "${BLUE}To commit these changes, run:${NC}"
            echo "  git add CLAUDE.md"
            echo "  git commit -m 'docs: Auto-update CLAUDE.md with recent changes'"
            echo ""
            echo -e "${BLUE}Or run this script with --auto-commit to commit automatically${NC}"
        fi
    fi
fi

echo ""
echo -e "${BLUE}================================================${NC}"
echo -e "${GREEN}          Documentation update complete!        ${NC}"
echo -e "${BLUE}================================================${NC}"